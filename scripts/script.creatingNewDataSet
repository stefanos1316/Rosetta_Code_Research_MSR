#!/bin/bash

#This script is responsible for removing tasks, a user must give a file of tasks or all the task as command line arguments

if [ "$#" -eq 0 ]; then
	echo "Illegal number of command line arguments, try --help for more information"
	exit
fi

if [ "$1" == "--help" ]; then
	echo "	"
	echo "========================"
	echo "|Command Line Arguments|"
	echo "========================"
	echo "	"
	echo "--tasks			Write a number of tasks found under the RosettaCode repository enclosed in" 
	echo "			double quotes, e.g., \"100-doors A+B Abstract-type\"."
	echo "--tasksFile		Provide as an input a file that contains the number of tasks you would like" 
	echo "			to have in your newly created dataset, e.g., write the task's name and new" 
	echo "			line after."
	echo "--languages		Write a number of programming languages available under the RosettaCode repo-" 
	echo "			sitory closed in double quotes, e.g., \"java c c++ c# \"."
	echo "--languagesFile   	Provide as an input a file that contains the number of tasks you would like" 
	echo "			to have in your newly create dataset, e.g., write the programming languages"
	echo "			and add a new line after each one."
	echo "	"
	echo "Note: All the arguments are case insensitive, thus, adding them in capitals or smalls does not" 
	echo "      any difference."
	exit
fi

echo "Removing Tasks and languages"

#Prepare variables
tasks=0
languages=0
tasksFile=0
languagesFile=0

#Get all arguments
args=("$@") 

#Get number of elements 
ELEMENTS=${#args[@]} 

for ((i=0;i<$ELEMENTS;++i)); 
do  
	case "${args[${i}]}" in 
	("--tasks") tasks=${args[i+1]} ;;
	("--languages") languages="${args[i+1]}" ;;
	("--tasksFile") tasksFile="${args[i+1]}" ;;
	("--languagesFile") languagesFile="${args[i+1]}" ;;
	esac
done

if [[ $tasksFile != "0"  &&  $tasks != "0" ]]; 
then
	echo "Error: Add only a list of tasks or a file of tasks"
	exit
fi

if [[ $languages != "0" && $languagesFile != "0" ]]; 
then
        echo "Error: Add only a list of programming languages or a file of programming languages"
        exit
fi


###############################################################################################################################
#						ALL FUNCTIONS HERE						              # 		 		
###############################################################################################################################

#This function is executed only when the user gives the command line parameters as --tasks and --languages
function fromCLI {
#At this point of the script we will loop the task directory to remove the tasks not included in our query

arrayOfTasks=0
sorted=0

if [[ $tasks != "0" ]]; 
then
	IFS=" " read -a arrayOfTasks <<< "$tasks"

	#Since that Task directory is by default sorted we are also sorting our input 
	#in order to remove the tasks with the appropriate sequence. 
	IFS=$'\n' sorted=($(for j in "${arrayOfTasks[@]}"; do echo $j; done | tr '[A-Z]' [a-z] | sort))
	unset IFS
else
	echo "Error: No command line arguments where given from the user."
	echo "Please try again or see --help option"
	exit
fi

arrayOfLanguages=0
sortedLang=0

if [[ $languages != "0" ]];
	then
	IFS=" " read -a arrayOfLanguages <<< "$languages"

	#Sorting them
	IFS=$'\n' sortedLang=($(for a in "${arrayOfLanguages[@]}"; do echo $a; done | tr '[A-Z]' [a-z] | sort))
	unset IFS
else
	echo "Error: No command line arguments where given from the user."
	echo "Please try again or see --help option"
	exit
fi


mkdir TaskNew

for i in `ls Task`;
do
	for taskArray in "${sorted[@]}";
	do
		if [[ "$i" == "$taskArray" ]]; 
		then
			mkdir TaskNew/$i
			#Here we will remove the programming languages not added in our "--languages" query
			for j in `ls Task/$i`;
			do
				for languagesArray in "${sortedLang[@]}";
				do
					if [[ "$j" == "$languagesArray" ]];
					then
						echo "Copying Task/$i/$j to TaskNew/$i"
						cp -r Task/$i/$j TaskNew/$i
					fi
				done
				
			done
		fi
	done
done

#At this point we remove the Task directory and we name the TaskNew as Task
rm -rf Task
mv TaskNew Task
}

#This function is executed only when the user gives the commnad line parameters as --tasksFile and --languagesFile
function fromFiles {
	
	IFS=$'\n' read -d '' -r -a tasksArray < $tasksFile
	IFS=$'\n' read -d '' -r -a languagesArray < $languagesFile

	IFS=$'\n' sortedTasks=($(for j in "${tasksArray[@]}"; do echo $j; done | tr '[A-Z]' '[a-z]' | sort))
	IFS=$'\n' sortedLanguages=($(for i in "${languagesArray[@]}"; do echo $i; done | tr '[A-Z]' '[a-z]' | sort))

	mkdir TaskNew

	for i in `ls Task`;
	do
		for taskArray in "${sortedTasks[@]}";
		do
			if [[ "$i" == "$taskArray" ]]; 
			then
				mkdir TaskNew/$i
				#Here we will remove the programming languages not added in our "--languages" query
				for j in `ls Task/$i`;
				do
					for languagesArray in "${sortedLanguages[@]}";
					do
						if [[ "$j" == "$languagesArray" ]];
						then
							echo "Copying Task/$i/$j to TaskNew/$i"
							cp -r Task/$i/$j TaskNew/$i
						fi
					done
				
				done
			fi
		done
	done

#Removing and renaming
rm -rf Task
mv TaskNew Task
}
###############################################################################################################################


#Checking which function to call
if [[ "$tasks" != 0 && "$tasksFile" == 0 ]];
then 
	fromCLI 
else
	fromFiles
fi

#This script will modify all our dataset from upper case to lower case letters

destination="Task/*"

for f in $destination;
do
	#echo "Files are $f changed to..."
	parentDirToLower=$( echo "$f" | awk -F "/" '{print $2}' | tr '[A-Z]' '[a-z]')
	fullPathParentDirToLower="Task/"$parentDirToLower
	if [ $f != $fullPathParentDirToLower ]; 
	then
	eval=$(mv $f $fullPathParentDirToLower)
	fi
	#echo "The new dir name is $parentDirToLower and the path is $fullPathParentDirToLower"

	#At this point we will dive in each files directory of directory (current file (Tasks) -> dir (Programming Languages) -> dir (Task's Implementation))
	#to change the Tasks file name
	deepDirectory=$fullPathParentDirToLower"/*"
	for tasksProgrammingLanguages in $deepDirectory;
	do
		#echo "Currently in directory $tasksProgrammingLanguages"
		#At this point we are also changing programming languages letter from upper to lower case
		changeProgrammingLan=$(echo "$tasksProgrammingLanguages" | awk -F "/" '{print $NF}' | tr '[A-Z]' '[a-z]')
		remainPath=$(echo "$tasksProgrammingLanguages" | awk -F "/" '{$NF=""; print $1"/"$2"/"}')
		#echo "Current path $remainPath$changeProgrammingLan"
		newPathLang=$remainPath"/"$changeProgrammingLan
		eval=$(mv $tasksProgrammingLanguages $newPathLang)
		#echo "Changing $tasksProgrammingLanguages to $newPathLang"
		#Now get one level deeper
		deepDeepDirecotry=$newPathLang"/*"
		for tasksImplementations in $deepDeepDirecotry;
		do
			#echo "Currently in directory $deepDeepDirecotry and file name is $tasksImplementations"
			changeToLower=$(echo "$tasksImplementations" | awk -F "/" '{print $4}' | tr '[A-Z]' '[a-z]')
			remain=$(echo "$tasksImplementations" | awk -F "/" '{print $1"/"$2"/"$3}')
			newChangedToLower=$remain"/"$changeToLower
			#echo "New is $newChangedToLower"
			if [ $tasksImplementations != $newChangedToLower ];
			then
				eval=$(mv $tasksImplementations $newChangedToLower)
			fi
			#echo "Moved from $tasksImplementations to $newChangedToLower"
			
		done
	done
done

#Also chaning tasks from Common_Tasks_to_Test.txt
eval=$(tr '[A-Z]' '[a-z]' < Common_Tasks_to_Test.txt > Common_for_Testing.txt)
eval=$(mv Common_for_Testing.txt Common_Tasks_to_Test.txt)
echo "Changed also Common_Tasks_to_test.txt from upper to lower case letters"  
eval=$(rm -rf Common_for_Testing.txt)

exit
